<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>