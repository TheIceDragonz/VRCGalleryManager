/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.3
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using VRChat.API.Client;
using VRChat.API.Model;

namespace VRChat.API.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Inventory
        /// </summary>
        /// <remarks>
        /// Returns an Inventory object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="inventorySortOrder">Sort order for inventory retrieval. (optional)</param>
        /// <param name="inventoryItemType">Filter for inventory retrieval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Inventory</returns>
        Inventory GetInventory(int? n = default(int?), int? offset = default(int?), string inventorySortOrder = default(string), InventoryItemType? inventoryItemType = default(InventoryItemType?), int operationIndex = 0);

        /// <summary>
        /// Get Inventory
        /// </summary>
        /// <remarks>
        /// Returns an Inventory object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="inventorySortOrder">Sort order for inventory retrieval. (optional)</param>
        /// <param name="inventoryItemType">Filter for inventory retrieval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Inventory</returns>
        ApiResponse<Inventory> GetInventoryWithHttpInfo(int? n = default(int?), int? offset = default(int?), string inventorySortOrder = default(string), InventoryItemType? inventoryItemType = default(InventoryItemType?), int operationIndex = 0);
        /// <summary>
        /// List Inventory Drops
        /// </summary>
        /// <remarks>
        /// Returns a list of InventoryDrop objects.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Filter for users&#39; listings and inventory bundles. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;InventoryDrop&gt;</returns>
        List<InventoryDrop> GetInventoryDrops(bool? active = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List Inventory Drops
        /// </summary>
        /// <remarks>
        /// Returns a list of InventoryDrop objects.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Filter for users&#39; listings and inventory bundles. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;InventoryDrop&gt;</returns>
        ApiResponse<List<InventoryDrop>> GetInventoryDropsWithHttpInfo(bool? active = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Inventory Template
        /// </summary>
        /// <remarks>
        /// Returns an InventoryTemplate object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryTemplateId">Must be a valid inventory template ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InventoryTemplate</returns>
        InventoryTemplate GetInventoryTemplate(string inventoryTemplateId, int operationIndex = 0);

        /// <summary>
        /// Get Inventory Template
        /// </summary>
        /// <remarks>
        /// Returns an InventoryTemplate object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryTemplateId">Must be a valid inventory template ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InventoryTemplate</returns>
        ApiResponse<InventoryTemplate> GetInventoryTemplateWithHttpInfo(string inventoryTemplateId, int operationIndex = 0);
        /// <summary>
        /// Get Own Inventory Item
        /// </summary>
        /// <remarks>
        /// Returns an InventoryItem object held by the currently logged in user.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryItemId">Must be a valid inventory item ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InventoryItem</returns>
        InventoryItem GetOwnInventoryItem(string inventoryItemId, int operationIndex = 0);

        /// <summary>
        /// Get User Inventory Item
        /// </summary>
        /// <remarks>
        /// Returns an InventoryItem object held by a specific user.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="inventoryItemId">Must be a valid inventory item ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InventoryItem</returns>
        InventoryItem GetUserInventoryItem(string userId, string inventoryItemId, int operationIndex = 0);

        /// <summary>
        /// Get Own Inventory Item
        /// </summary>
        /// <remarks>
        /// Returns an InventoryItem object held by the currently logged in user.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryItemId">Must be a valid inventory item ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InventoryItem</returns>
        ApiResponse<InventoryItem> GetOwnInventoryItemWithHttpInfo(string inventoryItemId, int operationIndex = 0);
        /// <summary>
        /// Spawn Inventory Item
        /// </summary>
        /// <remarks>
        /// Returns an InventorySpawn object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id for inventory item spawning.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InventorySpawn</returns>
        InventorySpawn SpawnInventoryItem(string id, int operationIndex = 0);

        /// <summary>
        /// Spawn Inventory Item
        /// </summary>
        /// <remarks>
        /// Returns an InventorySpawn object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id for inventory item spawning.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InventorySpawn</returns>
        ApiResponse<InventorySpawn> SpawnInventoryItemWithHttpInfo(string id, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Inventory
        /// </summary>
        /// <remarks>
        /// Returns an Inventory object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="inventorySortOrder">Sort order for inventory retrieval. (optional)</param>
        /// <param name="inventoryItemType">Filter for inventory retrieval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Inventory</returns>
        System.Threading.Tasks.Task<Inventory> GetInventoryAsync(int? n = default(int?), int? offset = default(int?), string inventorySortOrder = default(string), InventoryItemType? inventoryItemType = default(InventoryItemType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Inventory
        /// </summary>
        /// <remarks>
        /// Returns an Inventory object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="inventorySortOrder">Sort order for inventory retrieval. (optional)</param>
        /// <param name="inventoryItemType">Filter for inventory retrieval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Inventory)</returns>
        System.Threading.Tasks.Task<ApiResponse<Inventory>> GetInventoryWithHttpInfoAsync(int? n = default(int?), int? offset = default(int?), string inventorySortOrder = default(string), InventoryItemType? inventoryItemType = default(InventoryItemType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Inventory Drops
        /// </summary>
        /// <remarks>
        /// Returns a list of InventoryDrop objects.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Filter for users&#39; listings and inventory bundles. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryDrop&gt;</returns>
        System.Threading.Tasks.Task<List<InventoryDrop>> GetInventoryDropsAsync(bool? active = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Inventory Drops
        /// </summary>
        /// <remarks>
        /// Returns a list of InventoryDrop objects.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Filter for users&#39; listings and inventory bundles. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryDrop&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InventoryDrop>>> GetInventoryDropsWithHttpInfoAsync(bool? active = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Inventory Template
        /// </summary>
        /// <remarks>
        /// Returns an InventoryTemplate object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryTemplateId">Must be a valid inventory template ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryTemplate</returns>
        System.Threading.Tasks.Task<InventoryTemplate> GetInventoryTemplateAsync(string inventoryTemplateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Inventory Template
        /// </summary>
        /// <remarks>
        /// Returns an InventoryTemplate object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryTemplateId">Must be a valid inventory template ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryTemplate>> GetInventoryTemplateWithHttpInfoAsync(string inventoryTemplateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Own Inventory Item
        /// </summary>
        /// <remarks>
        /// Returns an InventoryItem object held by the currently logged in user.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryItemId">Must be a valid inventory item ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryItem</returns>
        System.Threading.Tasks.Task<InventoryItem> GetOwnInventoryItemAsync(string inventoryItemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Own Inventory Item
        /// </summary>
        /// <remarks>
        /// Returns an InventoryItem object held by the currently logged in user.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryItemId">Must be a valid inventory item ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryItem>> GetOwnInventoryItemWithHttpInfoAsync(string inventoryItemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Spawn Inventory Item
        /// </summary>
        /// <remarks>
        /// Returns an InventorySpawn object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id for inventory item spawning.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventorySpawn</returns>
        /// 

        /// <summary>
        /// Get User Inventory Item
        /// </summary>
        /// <remarks>
        /// Returns an InventoryItem object held by a specific user.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">Must be a valid user ID.</param>
        /// <param name="inventoryItemId">Must be a valid inventory item ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryItem</returns>
        System.Threading.Tasks.Task<InventoryItem> GetUserInventoryItemAsync(
            string userId,
            string inventoryItemId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)
        );


        System.Threading.Tasks.Task<InventorySpawn> SpawnInventoryItemAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Spawn Inventory Item
        /// </summary>
        /// <remarks>
        /// Returns an InventorySpawn object.
        /// </remarks>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id for inventory item spawning.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventorySpawn)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventorySpawn>> SpawnInventoryItemWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoryApi : IInventoryApiSync, IInventoryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InventoryApi : IInventoryApi
    {
        private VRChat.API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InventoryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InventoryApi(string basePath)
        {
            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                new VRChat.API.Client.Configuration { BasePath = basePath }
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InventoryApi(VRChat.API.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = VRChat.API.Client.Configuration.MergeConfigurations(
                VRChat.API.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new VRChat.API.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InventoryApi(VRChat.API.Client.ISynchronousClient client, VRChat.API.Client.IAsynchronousClient asyncClient, VRChat.API.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = VRChat.API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public VRChat.API.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public VRChat.API.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VRChat.API.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VRChat.API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Inventory Returns an Inventory object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="inventorySortOrder">Sort order for inventory retrieval. (optional)</param>
        /// <param name="inventoryItemType">Filter for inventory retrieval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Inventory</returns>
        public Inventory GetInventory(int? n = default(int?), int? offset = default(int?), string inventorySortOrder = default(string), InventoryItemType? inventoryItemType = default(InventoryItemType?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<Inventory> localVarResponse = GetInventoryWithHttpInfo(n, offset, inventorySortOrder, inventoryItemType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inventory Returns an Inventory object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="inventorySortOrder">Sort order for inventory retrieval. (optional)</param>
        /// <param name="inventoryItemType">Filter for inventory retrieval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Inventory</returns>
        public VRChat.API.Client.ApiResponse<Inventory> GetInventoryWithHttpInfo(int? n = default(int?), int? offset = default(int?), string inventorySortOrder = default(string), InventoryItemType? inventoryItemType = default(InventoryItemType?), int operationIndex = 0)
        {
            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (inventorySortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "inventorySortOrder", inventorySortOrder));
            }
            if (inventoryItemType != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "inventoryItemType", inventoryItemType));
            }

            localVarRequestOptions.Operation = "InventoryApi.GetInventory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Inventory>("/inventory", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Inventory Returns an Inventory object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="inventorySortOrder">Sort order for inventory retrieval. (optional)</param>
        /// <param name="inventoryItemType">Filter for inventory retrieval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Inventory</returns>
        public async System.Threading.Tasks.Task<Inventory> GetInventoryAsync(int? n = default(int?), int? offset = default(int?), string inventorySortOrder = default(string), InventoryItemType? inventoryItemType = default(InventoryItemType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<Inventory> localVarResponse = await GetInventoryWithHttpInfoAsync(n, offset, inventorySortOrder, inventoryItemType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inventory Returns an Inventory object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="n">The number of objects to return. (optional, default to 60)</param>
        /// <param name="offset">A zero-based offset from the default object sorting from where search results start. (optional)</param>
        /// <param name="inventorySortOrder">Sort order for inventory retrieval. (optional)</param>
        /// <param name="inventoryItemType">Filter for inventory retrieval. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Inventory)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<Inventory>> GetInventoryWithHttpInfoAsync(int? n = default(int?), int? offset = default(int?), string inventorySortOrder = default(string), InventoryItemType? inventoryItemType = default(InventoryItemType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (n != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "n", n));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (inventorySortOrder != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "inventorySortOrder", inventorySortOrder));
            }
            if (inventoryItemType != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "inventoryItemType", inventoryItemType));
            }

            localVarRequestOptions.Operation = "InventoryApi.GetInventory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Inventory>("/inventory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Inventory Drops Returns a list of InventoryDrop objects.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Filter for users&#39; listings and inventory bundles. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;InventoryDrop&gt;</returns>
        public List<InventoryDrop> GetInventoryDrops(bool? active = default(bool?), int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<List<InventoryDrop>> localVarResponse = GetInventoryDropsWithHttpInfo(active);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Inventory Drops Returns a list of InventoryDrop objects.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Filter for users&#39; listings and inventory bundles. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;InventoryDrop&gt;</returns>
        public VRChat.API.Client.ApiResponse<List<InventoryDrop>> GetInventoryDropsWithHttpInfo(bool? active = default(bool?), int operationIndex = 0)
        {
            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }

            localVarRequestOptions.Operation = "InventoryApi.GetInventoryDrops";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<InventoryDrop>>("/inventory/drops", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryDrops", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Inventory Drops Returns a list of InventoryDrop objects.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Filter for users&#39; listings and inventory bundles. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;InventoryDrop&gt;</returns>
        public async System.Threading.Tasks.Task<List<InventoryDrop>> GetInventoryDropsAsync(bool? active = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<List<InventoryDrop>> localVarResponse = await GetInventoryDropsWithHttpInfoAsync(active, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Inventory Drops Returns a list of InventoryDrop objects.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Filter for users&#39; listings and inventory bundles. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;InventoryDrop&gt;)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<List<InventoryDrop>>> GetInventoryDropsWithHttpInfoAsync(bool? active = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (active != null)
            {
                localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "active", active));
            }

            localVarRequestOptions.Operation = "InventoryApi.GetInventoryDrops";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InventoryDrop>>("/inventory/drops", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryDrops", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Inventory Template Returns an InventoryTemplate object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryTemplateId">Must be a valid inventory template ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InventoryTemplate</returns>
        public InventoryTemplate GetInventoryTemplate(string inventoryTemplateId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<InventoryTemplate> localVarResponse = GetInventoryTemplateWithHttpInfo(inventoryTemplateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inventory Template Returns an InventoryTemplate object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryTemplateId">Must be a valid inventory template ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InventoryTemplate</returns>
        public VRChat.API.Client.ApiResponse<InventoryTemplate> GetInventoryTemplateWithHttpInfo(string inventoryTemplateId, int operationIndex = 0)
        {
            // verify the required parameter 'inventoryTemplateId' is set
            if (inventoryTemplateId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'inventoryTemplateId' when calling InventoryApi->GetInventoryTemplate");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("inventoryTemplateId", VRChat.API.Client.ClientUtils.ParameterToString(inventoryTemplateId)); // path parameter

            localVarRequestOptions.Operation = "InventoryApi.GetInventoryTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InventoryTemplate>("/inventory/template/{inventoryTemplateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Inventory Template Returns an InventoryTemplate object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryTemplateId">Must be a valid inventory template ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryTemplate</returns>
        public async System.Threading.Tasks.Task<InventoryTemplate> GetInventoryTemplateAsync(string inventoryTemplateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<InventoryTemplate> localVarResponse = await GetInventoryTemplateWithHttpInfoAsync(inventoryTemplateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inventory Template Returns an InventoryTemplate object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryTemplateId">Must be a valid inventory template ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryTemplate)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<InventoryTemplate>> GetInventoryTemplateWithHttpInfoAsync(string inventoryTemplateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inventoryTemplateId' is set
            if (inventoryTemplateId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'inventoryTemplateId' when calling InventoryApi->GetInventoryTemplate");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("inventoryTemplateId", VRChat.API.Client.ClientUtils.ParameterToString(inventoryTemplateId)); // path parameter

            localVarRequestOptions.Operation = "InventoryApi.GetInventoryTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InventoryTemplate>("/inventory/template/{inventoryTemplateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInventoryTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Own Inventory Item Returns an InventoryItem object held by the currently logged in user.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryItemId">Must be a valid inventory item ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InventoryItem</returns>
        public InventoryItem GetOwnInventoryItem(string inventoryItemId, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<InventoryItem> localVarResponse = GetOwnInventoryItemWithHttpInfo(inventoryItemId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Own Inventory Item Returns an InventoryItem object held by the currently logged in user.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryItemId">Must be a valid inventory item ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InventoryItem</returns>
        public VRChat.API.Client.ApiResponse<InventoryItem> GetOwnInventoryItemWithHttpInfo(string inventoryItemId, int operationIndex = 0)
        {
            // verify the required parameter 'inventoryItemId' is set
            if (inventoryItemId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'inventoryItemId' when calling InventoryApi->GetOwnInventoryItem");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("inventoryItemId", VRChat.API.Client.ClientUtils.ParameterToString(inventoryItemId)); // path parameter

            localVarRequestOptions.Operation = "InventoryApi.GetOwnInventoryItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InventoryItem>("/inventory/{inventoryItemId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwnInventoryItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Own Inventory Item Returns an InventoryItem object held by the currently logged in user.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryItemId">Must be a valid inventory item ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryItem</returns>
        public async System.Threading.Tasks.Task<InventoryItem> GetOwnInventoryItemAsync(string inventoryItemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<InventoryItem> localVarResponse = await GetOwnInventoryItemWithHttpInfoAsync(inventoryItemId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Own Inventory Item Returns an InventoryItem object held by the currently logged in user.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inventoryItemId">Must be a valid inventory item ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryItem)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<InventoryItem>> GetOwnInventoryItemWithHttpInfoAsync(string inventoryItemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'inventoryItemId' is set
            if (inventoryItemId == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'inventoryItemId' when calling InventoryApi->GetOwnInventoryItem");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("inventoryItemId", VRChat.API.Client.ClientUtils.ParameterToString(inventoryItemId)); // path parameter

            localVarRequestOptions.Operation = "InventoryApi.GetOwnInventoryItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InventoryItem>("/inventory/{inventoryItemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOwnInventoryItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        // SYNC
        public InventoryItem GetUserInventoryItem(string userId, string inventoryItemId, int operationIndex = 0)
        {
            if (userId == null)
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InventoryApi->GetUserInventoryItem");
            if (inventoryItemId == null)
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'inventoryItemId' when calling InventoryApi->GetUserInventoryItem");

            var localVarRequestOptions = new VRChat.API.Client.RequestOptions();
            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(new[] { "application/json" });
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId));
            localVarRequestOptions.PathParameters.Add("inventoryItemId", VRChat.API.Client.ClientUtils.ParameterToString(inventoryItemId));

            localVarRequestOptions.Operation = "InventoryApi.GetUserInventoryItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));

            // ⚠️ Leggo come string per gestire risposte non-OK / non-json conformi
            var resp = this.Client.Get<string>("/user/{userId}/inventory/{inventoryItemId}", localVarRequestOptions, this.Configuration);

            if (resp.StatusCode == HttpStatusCode.OK && !string.IsNullOrEmpty(resp.Data))
            {
                // opzionale: guard veloce per evitare l'errore "itemType mancante" quando la payload è un errore HTML/JSON
                if (!resp.Data.Contains("\"itemType\""))
                    throw new VRChat.API.Client.ApiException((int)resp.StatusCode, "Unexpected payload (missing 'itemType'). Raw: " + resp.Data);

                try
                {
                    return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryItem>(resp.Data);
                }
                catch (Exception ex)
                {
                    throw new VRChat.API.Client.ApiException(500, "Failed to parse InventoryItem: " + ex.Message + "\nPayload: " + resp.Data);
                }
            }

            throw new VRChat.API.Client.ApiException((int)resp.StatusCode, resp.RawContent ?? resp.ErrorText ?? "Unexpected response.");
        }

        // ASYNC
        public async System.Threading.Tasks.Task<InventoryItem> GetUserInventoryItemAsync(
            string userId,
            string inventoryItemId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken = default)
        {
            if (userId == null)
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'userId' when calling InventoryApi->GetUserInventoryItem");
            if (inventoryItemId == null)
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'inventoryItemId' when calling InventoryApi->GetUserInventoryItem");

            var localVarRequestOptions = new VRChat.API.Client.RequestOptions();
            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(new[] { "application/json" });
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", VRChat.API.Client.ClientUtils.ParameterToString(userId));
            localVarRequestOptions.PathParameters.Add("inventoryItemId", VRChat.API.Client.ClientUtils.ParameterToString(inventoryItemId));

            localVarRequestOptions.Operation = "InventoryApi.GetUserInventoryItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));

            var resp = await this.AsynchronousClient.GetAsync<string>("/user/{userId}/inventory/{inventoryItemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (resp.StatusCode == HttpStatusCode.OK && !string.IsNullOrEmpty(resp.Data))
            {
                if (!resp.Data.Contains("\"itemType\""))
                    throw new VRChat.API.Client.ApiException((int)resp.StatusCode, "Unexpected payload (missing 'itemType'). Raw: " + resp.Data);

                try
                {
                    return Newtonsoft.Json.JsonConvert.DeserializeObject<InventoryItem>(resp.Data);
                }
                catch (Exception ex)
                {
                    throw new VRChat.API.Client.ApiException(500, "Failed to parse InventoryItem: " + ex.Message + "\nPayload: " + resp.Data);
                }
            }

            throw new VRChat.API.Client.ApiException((int)resp.StatusCode, resp.RawContent ?? resp.ErrorText ?? "Unexpected response.");
        }


        /// <summary>
        /// Spawn Inventory Item Returns an InventorySpawn object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id for inventory item spawning.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InventorySpawn</returns>
        public InventorySpawn SpawnInventoryItem(string id, int operationIndex = 0)
        {
            VRChat.API.Client.ApiResponse<InventorySpawn> localVarResponse = SpawnInventoryItemWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Spawn Inventory Item Returns an InventorySpawn object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id for inventory item spawning.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InventorySpawn</returns>
        public VRChat.API.Client.ApiResponse<InventorySpawn> SpawnInventoryItemWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'id' when calling InventoryApi->SpawnInventoryItem");
            }

            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "InventoryApi.SpawnInventoryItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InventorySpawn>("/inventory/spawn", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpawnInventoryItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Spawn Inventory Item Returns an InventorySpawn object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id for inventory item spawning.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventorySpawn</returns>
        public async System.Threading.Tasks.Task<InventorySpawn> SpawnInventoryItemAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            VRChat.API.Client.ApiResponse<InventorySpawn> localVarResponse = await SpawnInventoryItemWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Spawn Inventory Item Returns an InventorySpawn object.
        /// </summary>
        /// <exception cref="VRChat.API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id for inventory item spawning.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventorySpawn)</returns>
        public async System.Threading.Tasks.Task<VRChat.API.Client.ApiResponse<InventorySpawn>> SpawnInventoryItemWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new VRChat.API.Client.ApiException(400, "Missing required parameter 'id' when calling InventoryApi->SpawnInventoryItem");
            }


            VRChat.API.Client.RequestOptions localVarRequestOptions = new VRChat.API.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = VRChat.API.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = VRChat.API.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(VRChat.API.Client.ClientUtils.ParameterToMultiMap("", "id", id));

            localVarRequestOptions.Operation = "InventoryApi.SpawnInventoryItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (authCookie) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("auth")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("auth", this.Configuration.GetApiKeyWithPrefix("auth"), "/", "vrchat.com"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InventorySpawn>("/inventory/spawn", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpawnInventoryItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
