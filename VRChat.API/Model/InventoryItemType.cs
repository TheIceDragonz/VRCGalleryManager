/*
 * VRChat API Documentation
 *
 * The version of the OpenAPI document: 1.20.3
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace VRChat.API.Model
{
    /// <summary>
    /// Defines InventoryItemType
    /// </summary>
    [JsonConverter(typeof(SafeStringEnumConverter<InventoryItemType>))]
    public enum InventoryItemType
    {
        /// <summary>
        /// Fallback per valori sconosciuti
        /// </summary>
        [EnumMember(Value = "unknown")]
        Unknown = 0,

        /// <summary>
        /// Enum Bundle for value: bundle
        /// </summary>
        [EnumMember(Value = "bundle")]
        Bundle = 1,

        /// <summary>
        /// Enum Prop for value: prop
        /// </summary>
        [EnumMember(Value = "prop")]
        Prop = 2,

        /// <summary>
        /// Enum Emoji for value: emoji
        /// </summary>
        [EnumMember(Value = "emoji")]
        Emoji = 3,

        /// <summary>
        /// Enum Sticker for value: sticker
        /// </summary>
        [EnumMember(Value = "sticker")]
        Sticker = 4,

        /// <summary>
        /// Enum PortalSkin for value: portalskin
        /// </summary>
        [EnumMember(Value = "portalskin")]
        PortalSkin = 5
    }

    /// <summary>
    /// Converter che fa fallback su Unknown se un valore non è mappato nell'enum
    /// </summary>
    public class SafeStringEnumConverter<T> : StringEnumConverter where T : struct
    {
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            try
            {
                return base.ReadJson(reader, objectType, existingValue, serializer);
            }
            catch
            {
                return Enum.Parse(typeof(T), "Unknown");
            }
        }
    }
}
