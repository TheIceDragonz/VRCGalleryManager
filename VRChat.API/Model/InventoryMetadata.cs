/*
 * VRChat API Documentation
 *
 *
 * The version of the OpenAPI document: 1.20.3
 * Contact: vrchatapi.lpv0t@aries.fyi
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = VRChat.API.Client.OpenAPIDateConverter;

namespace VRChat.API.Model
{
    /// <summary>
    /// InventoryMetadata
    /// </summary>
    [DataContract(Name = "InventoryMetadata")]
    public partial class InventoryMetadata : Dictionary<String, Object>, IEquatable<InventoryMetadata>, IValidatableObject
    {
        /// <summary>
        /// 🔹 Costruttore VUOTO necessario per Newtonsoft
        /// </summary>
        public InventoryMetadata() : base()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Costruttore completo
        /// </summary>
        public InventoryMetadata(
            List<string> inventoryItemsToInstantiate = default(List<string>),
            bool animated = default(bool),
            string animationStyle = default(string),
            string assetBundleId = default(string),
            string fileId = default(string),
            string imageUrl = default(string),
            string maskTag = default(string),
            string propId = default(string),
            int? frames = default(int?),
            int? framesOverTime = default(int?),
            string loopStyle = default(string)
        ) : base()
        {
            this.InventoryItemsToInstantiate = inventoryItemsToInstantiate;
            this.Animated = animated;
            this.AnimationStyle = animationStyle;
            this.AssetBundleId = assetBundleId;
            this.FileId = fileId;
            this.ImageUrl = imageUrl;
            this.MaskTag = maskTag;
            this.PropId = propId;
            this.Frames = frames;
            this.FramesOverTime = framesOverTime;
            this.LoopStyle = loopStyle;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Only in bundles
        /// </summary>
        [DataMember(Name = "inventoryItemsToInstantiate", EmitDefaultValue = false)]
        public List<string> InventoryItemsToInstantiate { get; set; }

        [DataMember(Name = "animated", EmitDefaultValue = true)]
        public bool Animated { get; set; }

        [DataMember(Name = "animationStyle", EmitDefaultValue = false)]
        public string AnimationStyle { get; set; }

        [DataMember(Name = "assetBundleId", EmitDefaultValue = false)]
        public string AssetBundleId { get; set; }

        [DataMember(Name = "fileId", EmitDefaultValue = false)]
        public string FileId { get; set; }

        [DataMember(Name = "imageUrl", EmitDefaultValue = false)]
        public string ImageUrl { get; set; }

        [DataMember(Name = "maskTag", EmitDefaultValue = false)]
        public string MaskTag { get; set; }

        [DataMember(Name = "propId", EmitDefaultValue = false)]
        public string PropId { get; set; }

        /// <summary>
        /// 🔹 Nuovi campi per Emoji/Animazioni
        /// </summary>
        [DataMember(Name = "frames", EmitDefaultValue = false)]
        public int? Frames { get; set; }

        [DataMember(Name = "framesOverTime", EmitDefaultValue = false)]
        public int? FramesOverTime { get; set; }

        [DataMember(Name = "loopStyle", EmitDefaultValue = false)]
        public string LoopStyle { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InventoryMetadata {\n");
            sb.Append("  InventoryItemsToInstantiate: ").Append(InventoryItemsToInstantiate).Append("\n");
            sb.Append("  Animated: ").Append(Animated).Append("\n");
            sb.Append("  AnimationStyle: ").Append(AnimationStyle).Append("\n");
            sb.Append("  AssetBundleId: ").Append(AssetBundleId).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  MaskTag: ").Append(MaskTag).Append("\n");
            sb.Append("  PropId: ").Append(PropId).Append("\n");
            sb.Append("  Frames: ").Append(Frames).Append("\n");
            sb.Append("  FramesOverTime: ").Append(FramesOverTime).Append("\n");
            sb.Append("  LoopStyle: ").Append(LoopStyle).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        public override bool Equals(object input)
        {
            return this.Equals(input as InventoryMetadata);
        }

        public bool Equals(InventoryMetadata input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                   (
                       this.InventoryItemsToInstantiate == input.InventoryItemsToInstantiate ||
                       (this.InventoryItemsToInstantiate != null &&
                        input.InventoryItemsToInstantiate != null &&
                        this.InventoryItemsToInstantiate.SequenceEqual(input.InventoryItemsToInstantiate))
                   ) &&
                   this.Animated == input.Animated &&
                   this.AnimationStyle == input.AnimationStyle &&
                   this.AssetBundleId == input.AssetBundleId &&
                   this.FileId == input.FileId &&
                   this.ImageUrl == input.ImageUrl &&
                   this.MaskTag == input.MaskTag &&
                   this.PropId == input.PropId &&
                   this.Frames == input.Frames &&
                   this.FramesOverTime == input.FramesOverTime &&
                   this.LoopStyle == input.LoopStyle &&
                   (this.AdditionalProperties.Count == input.AdditionalProperties.Count &&
                    !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hashCode = base.GetHashCode();
                if (this.InventoryItemsToInstantiate != null)
                    hashCode = (hashCode * 59) + this.InventoryItemsToInstantiate.GetHashCode();
                hashCode = (hashCode * 59) + this.Animated.GetHashCode();
                if (this.AnimationStyle != null)
                    hashCode = (hashCode * 59) + this.AnimationStyle.GetHashCode();
                if (this.AssetBundleId != null)
                    hashCode = (hashCode * 59) + this.AssetBundleId.GetHashCode();
                if (this.FileId != null)
                    hashCode = (hashCode * 59) + this.FileId.GetHashCode();
                if (this.ImageUrl != null)
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                if (this.MaskTag != null)
                    hashCode = (hashCode * 59) + this.MaskTag.GetHashCode();
                if (this.PropId != null)
                    hashCode = (hashCode * 59) + this.PropId.GetHashCode();
                if (this.Frames != null)
                    hashCode = (hashCode * 59) + this.Frames.GetHashCode();
                if (this.FramesOverTime != null)
                    hashCode = (hashCode * 59) + this.FramesOverTime.GetHashCode();
                if (this.LoopStyle != null)
                    hashCode = (hashCode * 59) + this.LoopStyle.GetHashCode();
                if (this.AdditionalProperties != null)
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                return hashCode;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
